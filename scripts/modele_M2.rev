## run with rb model_M2.rev

input_dir <- "dataset-levure"
dest  <- "Output"
#n_chains <- 1

counts <- readDataDelimitedFile(input_dir+"/counts.tsv", delimiter="\t", header=TRUE, rownames=TRUE)
samples <- readDataDelimitedFile(input_dir+"/samples.tsv", delimiter="\t", header=TRUE)
size_factors <- readDataDelimitedFile(input_dir+"/size_factors.tsv", delimiter="\t", header=TRUE, rownames=TRUE)

print("Data read...")
ngenes = counts.size()
nsamples = samples.size()
#ncond = length(unique(samples[samplesel,2]))

print("Number of genes: " + ngenes)
print("Number of samples: " + nsamples)

samp_type[1]="Snf2"
samp_type[2]="WT"
ncond = samp_type.size()

for (i in 1:nsamples){
  if(samples[i][2]==samp_type[1]){
    cond[i]<-1
  }else if(samples[i][2]==samp_type[2]){
    cond[i]<-2
  }else{
    print("Error in parsing samples")
    q()
  }
}
print("Data ready...")

#############
# THE Model #
#############

sd_param <- 1.5
mean_param <- 3
for(i in 1:ngenes) {
  for(k in 1:ncond) {
    log10_q[i][k]~dnNormal(mean_param, sd_param)
  }
}

sd_param2 <- 2
mean_param2 <- -2
for(i in 1:ngenes) {
  log10_alpha[i]~dnNormal(-2, sd_param2)
  alpha[i] := power(10, log10_alpha[i])
}


for(i in 1:ngenes) {
  for(j in 1:nsamples) {
    tau[i][j] ~ dnGamma(1/alpha[i], 1/alpha[i])
    lambda[i][j] := size_factors[j][1] * power(10,log10_q[i][cond[j]]) * tau[i][j]
    K[i][j]~dnPoisson(lambda[i][j])
  }
}

for(i in 1:ngenes) {
  tmp[i] <- counts[i]
  print(i)
  for(j in 1:nsamples) {
    K[i][j].clamp(tmp[i][j])
  }
}

# We define our model.
# We can use any node of our model as a handle.

mymodel = model(mean_param)
print("Model created...")

#############
# THE moves #
#############
# set my move index
mvi = 0
for(i in 1:ngenes) {
  for(k in 1:ncond) {
    moves[++mvi] = mvSlide(log10_q[i][k],delta=1.0,tune=false,weight=1.0)
    moves[++mvi] = mvSlide(log10_q[i][k],delta=0.1,tune=false,weight=1.0)
    moves[++mvi] = mvSlide(log10_q[i][k],delta=0.01,tune=false,weight=1.0)
    moves[++mvi] = mvScale(tau[i][k],lambda=1.0,tune=false,weight=1.0)
    moves[++mvi] = mvScale(tau[i][k],lambda=0.1,tune=false,weight=1.0)
    moves[++mvi] = mvScale(tau[i][k],lambda=0.01,tune=false,weight=1.0)
  }
}

for(i in 1:ngenes) {
  moves[++mvi] = mvSlide(log10_alpha[i],delta=1.0,tune=false,weight=10.0)
  moves[++mvi] = mvSlide(log10_alpha[i],delta=0.1,tune=false,weight=10.0)
  moves[++mvi] = mvSlide(log10_alpha[i],delta=0.01,tune=false,weight=10.0)
}

print("Moves set up...")

################
# THE monitors #
################
mni = 0

monitors[++mni] = mnModel(filename=dest+"/M2_out.log",printgen=10, separator = TAB)
monitors[++mni] = mnStochasticVariable(filename=dest+"/M2_out_Stoch.log",printgen=20)
monitors[++mni] = mnScreen(printgen=100)
print("Monitors created...")

################
#     MCMC     #
################
mymcmc = mcmc(mymodel, monitors, moves, nruns=n_chains)
print("MCMC created...")

# NO BURNIN
#mymcmc.burnin(generations=1000,tuningInterval=200,underPrior=false)

# FEW GENERATIONS
mymcmc.run(generations=50000,underPrior=false)

mymcmc.operatorSummary()

# you may want to quit RevBayes now
q()
